-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_ipbus_tcds2_interface_accessor is

  constant IPBUS_SEL_WIDTH: positive := 10;
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_ipbus_tcds2_interface_accessor(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically  generated VHDL the Thu Oct 29 10:53:56 2020 
  constant N_SLV_CSR: integer := 0;
  constant N_SLV_SPY_FRAME_TX: integer := 1;
  constant N_SLV_SPY_FRAME_RX: integer := 2;
  constant N_SLV_SPY_TTC2_CHANNEL0: integer := 3;
  constant N_SLV_SPY_TTC2_CHANNEL1: integer := 4;
  constant N_SLV_SPY_TTS2_CHANNEL0: integer := 5;
  constant N_SLV_SPY_TTS2_CHANNEL1: integer := 6;
  constant N_SLAVES: integer := 7;
-- END automatically generated VHDL

    
end ipbus_decode_ipbus_tcds2_interface_accessor;

package body ipbus_decode_ipbus_tcds2_interface_accessor is

  function ipbus_sel_ipbus_tcds2_interface_accessor(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically  generated VHDL the Thu Oct 29 10:53:56 2020 
    if    std_match(addr, "------------------------0010----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CSR, IPBUS_SEL_WIDTH)); -- csr / base 0x00000020 / mask 0x000000f0
    elsif std_match(addr, "------------------------0100----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- spy_frame_tx / base 0x00000040 / mask 0x000000f0
    elsif std_match(addr, "------------------------0101----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- spy_frame_rx / base 0x00000050 / mask 0x000000f0
    elsif std_match(addr, "------------------------0110----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SPY_TTC2_CHANNEL0, IPBUS_SEL_WIDTH)); -- spy_ttc2_channel0 / base 0x00000060 / mask 0x000000f0
    elsif std_match(addr, "------------------------0111----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SPY_TTC2_CHANNEL1, IPBUS_SEL_WIDTH)); -- spy_ttc2_channel1 / base 0x00000070 / mask 0x000000f0
    elsif std_match(addr, "------------------------1001----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SPY_TTS2_CHANNEL0, IPBUS_SEL_WIDTH)); -- spy_tts2_channel0 / base 0x00000090 / mask 0x000000f0
    elsif std_match(addr, "------------------------1010----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SPY_TTS2_CHANNEL1, IPBUS_SEL_WIDTH)); -- spy_tts2_channel1 / base 0x000000a0 / mask 0x000000f0
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;

  end function ipbus_sel_ipbus_tcds2_interface_accessor;

end ipbus_decode_ipbus_tcds2_interface_accessor;

