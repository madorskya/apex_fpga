-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_dth_tcds2_backend_interface is

  constant IPBUS_SEL_WIDTH: positive := 6;
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_dth_tcds2_backend_interface(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically generated VHDL (Sat Jan 30 14:53:18 2021)
  constant N_SLV_SLOT_2_CSR: integer := 0;
  constant N_SLV_SLOT_2_SPY_FRAME_TX: integer := 1;
  constant N_SLV_SLOT_2_SPY_FRAME_RX: integer := 2;
  constant N_SLV_SLOT_3_CSR: integer := 3;
  constant N_SLV_SLOT_3_SPY_FRAME_TX: integer := 4;
  constant N_SLV_SLOT_3_SPY_FRAME_RX: integer := 5;
  constant N_SLV_SLOT_4_CSR: integer := 6;
  constant N_SLV_SLOT_4_SPY_FRAME_TX: integer := 7;
  constant N_SLV_SLOT_4_SPY_FRAME_RX: integer := 8;
  constant N_SLV_SLOT_5_CSR: integer := 9;
  constant N_SLV_SLOT_5_SPY_FRAME_TX: integer := 10;
  constant N_SLV_SLOT_5_SPY_FRAME_RX: integer := 11;
  constant N_SLV_SLOT_6_CSR: integer := 12;
  constant N_SLV_SLOT_6_SPY_FRAME_TX: integer := 13;
  constant N_SLV_SLOT_6_SPY_FRAME_RX: integer := 14;
  constant N_SLV_SLOT_7_CSR: integer := 15;
  constant N_SLV_SLOT_7_SPY_FRAME_TX: integer := 16;
  constant N_SLV_SLOT_7_SPY_FRAME_RX: integer := 17;
  constant N_SLV_SLOT_8_CSR: integer := 18;
  constant N_SLV_SLOT_8_SPY_FRAME_TX: integer := 19;
  constant N_SLV_SLOT_8_SPY_FRAME_RX: integer := 20;
  constant N_SLV_SLOT_9_CSR: integer := 21;
  constant N_SLV_SLOT_9_SPY_FRAME_TX: integer := 22;
  constant N_SLV_SLOT_9_SPY_FRAME_RX: integer := 23;
  constant N_SLV_SLOT_10_CSR: integer := 24;
  constant N_SLV_SLOT_10_SPY_FRAME_TX: integer := 25;
  constant N_SLV_SLOT_10_SPY_FRAME_RX: integer := 26;
  constant N_SLV_SLOT_11_CSR: integer := 27;
  constant N_SLV_SLOT_11_SPY_FRAME_TX: integer := 28;
  constant N_SLV_SLOT_11_SPY_FRAME_RX: integer := 29;
  constant N_SLV_SLOT_12_CSR: integer := 30;
  constant N_SLV_SLOT_12_SPY_FRAME_TX: integer := 31;
  constant N_SLV_SLOT_12_SPY_FRAME_RX: integer := 32;
  constant N_SLV_SLOT_13_CSR: integer := 33;
  constant N_SLV_SLOT_13_SPY_FRAME_TX: integer := 34;
  constant N_SLV_SLOT_13_SPY_FRAME_RX: integer := 35;
  constant N_SLV_SLOT_14_CSR: integer := 36;
  constant N_SLV_SLOT_14_SPY_FRAME_TX: integer := 37;
  constant N_SLV_SLOT_14_SPY_FRAME_RX: integer := 38;
  constant N_SLV_DAQ_FPGA_CSR: integer := 39;
  constant N_SLV_DAQ_FPGA_SPY_FRAME_TX: integer := 40;
  constant N_SLV_DAQ_FPGA_SPY_FRAME_RX: integer := 41;
  constant N_SLV_FREQUENCY_COUNTERS: integer := 42;
  constant N_SLAVES: integer := 43;
-- END automatically generated VHDL

    
end ipbus_decode_dth_tcds2_backend_interface;

package body ipbus_decode_dth_tcds2_backend_interface is

  function ipbus_sel_dth_tcds2_backend_interface(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically generated VHDL (Sat Jan 30 14:53:18 2021)
    if    std_match(addr, "---------------------0000000----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_2_CSR, IPBUS_SEL_WIDTH)); -- slot_2.csr / base 0x00000000 / mask 0x000007f0
    elsif std_match(addr, "---------------------0000001----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_2_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_2.spy_frame_tx / base 0x00000010 / mask 0x000007f0
    elsif std_match(addr, "---------------------0000010----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_2_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_2.spy_frame_rx / base 0x00000020 / mask 0x000007f0
    elsif std_match(addr, "---------------------0000100----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_3_CSR, IPBUS_SEL_WIDTH)); -- slot_3.csr / base 0x00000040 / mask 0x000007f0
    elsif std_match(addr, "---------------------0000101----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_3_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_3.spy_frame_tx / base 0x00000050 / mask 0x000007f0
    elsif std_match(addr, "---------------------0000110----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_3_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_3.spy_frame_rx / base 0x00000060 / mask 0x000007f0
    elsif std_match(addr, "---------------------0001000----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_4_CSR, IPBUS_SEL_WIDTH)); -- slot_4.csr / base 0x00000080 / mask 0x000007f0
    elsif std_match(addr, "---------------------0001001----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_4_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_4.spy_frame_tx / base 0x00000090 / mask 0x000007f0
    elsif std_match(addr, "---------------------0001010----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_4_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_4.spy_frame_rx / base 0x000000a0 / mask 0x000007f0
    elsif std_match(addr, "---------------------0001100----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_5_CSR, IPBUS_SEL_WIDTH)); -- slot_5.csr / base 0x000000c0 / mask 0x000007f0
    elsif std_match(addr, "---------------------0001101----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_5_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_5.spy_frame_tx / base 0x000000d0 / mask 0x000007f0
    elsif std_match(addr, "---------------------0001110----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_5_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_5.spy_frame_rx / base 0x000000e0 / mask 0x000007f0
    elsif std_match(addr, "---------------------0010000----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_6_CSR, IPBUS_SEL_WIDTH)); -- slot_6.csr / base 0x00000100 / mask 0x000007f0
    elsif std_match(addr, "---------------------0010001----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_6_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_6.spy_frame_tx / base 0x00000110 / mask 0x000007f0
    elsif std_match(addr, "---------------------0010010----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_6_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_6.spy_frame_rx / base 0x00000120 / mask 0x000007f0
    elsif std_match(addr, "---------------------0010100----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_7_CSR, IPBUS_SEL_WIDTH)); -- slot_7.csr / base 0x00000140 / mask 0x000007f0
    elsif std_match(addr, "---------------------0010101----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_7_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_7.spy_frame_tx / base 0x00000150 / mask 0x000007f0
    elsif std_match(addr, "---------------------0010110----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_7_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_7.spy_frame_rx / base 0x00000160 / mask 0x000007f0
    elsif std_match(addr, "---------------------0011000----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_8_CSR, IPBUS_SEL_WIDTH)); -- slot_8.csr / base 0x00000180 / mask 0x000007f0
    elsif std_match(addr, "---------------------0011001----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_8_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_8.spy_frame_tx / base 0x00000190 / mask 0x000007f0
    elsif std_match(addr, "---------------------0011010----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_8_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_8.spy_frame_rx / base 0x000001a0 / mask 0x000007f0
    elsif std_match(addr, "---------------------0011100----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_9_CSR, IPBUS_SEL_WIDTH)); -- slot_9.csr / base 0x000001c0 / mask 0x000007f0
    elsif std_match(addr, "---------------------0011101----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_9_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_9.spy_frame_tx / base 0x000001d0 / mask 0x000007f0
    elsif std_match(addr, "---------------------0011110----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_9_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_9.spy_frame_rx / base 0x000001e0 / mask 0x000007f0
    elsif std_match(addr, "---------------------0100000----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_10_CSR, IPBUS_SEL_WIDTH)); -- slot_10.csr / base 0x00000200 / mask 0x000007f0
    elsif std_match(addr, "---------------------0100001----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_10_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_10.spy_frame_tx / base 0x00000210 / mask 0x000007f0
    elsif std_match(addr, "---------------------0100010----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_10_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_10.spy_frame_rx / base 0x00000220 / mask 0x000007f0
    elsif std_match(addr, "---------------------0100100----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_11_CSR, IPBUS_SEL_WIDTH)); -- slot_11.csr / base 0x00000240 / mask 0x000007f0
    elsif std_match(addr, "---------------------0100101----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_11_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_11.spy_frame_tx / base 0x00000250 / mask 0x000007f0
    elsif std_match(addr, "---------------------0100110----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_11_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_11.spy_frame_rx / base 0x00000260 / mask 0x000007f0
    elsif std_match(addr, "---------------------0101000----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_12_CSR, IPBUS_SEL_WIDTH)); -- slot_12.csr / base 0x00000280 / mask 0x000007f0
    elsif std_match(addr, "---------------------0101001----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_12_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_12.spy_frame_tx / base 0x00000290 / mask 0x000007f0
    elsif std_match(addr, "---------------------0101010----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_12_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_12.spy_frame_rx / base 0x000002a0 / mask 0x000007f0
    elsif std_match(addr, "---------------------0101100----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_13_CSR, IPBUS_SEL_WIDTH)); -- slot_13.csr / base 0x000002c0 / mask 0x000007f0
    elsif std_match(addr, "---------------------0101101----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_13_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_13.spy_frame_tx / base 0x000002d0 / mask 0x000007f0
    elsif std_match(addr, "---------------------0101110----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_13_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_13.spy_frame_rx / base 0x000002e0 / mask 0x000007f0
    elsif std_match(addr, "---------------------0110000----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_14_CSR, IPBUS_SEL_WIDTH)); -- slot_14.csr / base 0x00000300 / mask 0x000007f0
    elsif std_match(addr, "---------------------0110001----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_14_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- slot_14.spy_frame_tx / base 0x00000310 / mask 0x000007f0
    elsif std_match(addr, "---------------------0110010----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SLOT_14_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- slot_14.spy_frame_rx / base 0x00000320 / mask 0x000007f0
    elsif std_match(addr, "---------------------0110100----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_DAQ_FPGA_CSR, IPBUS_SEL_WIDTH)); -- daq_fpga.csr / base 0x00000340 / mask 0x000007f0
    elsif std_match(addr, "---------------------0110101----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_DAQ_FPGA_SPY_FRAME_TX, IPBUS_SEL_WIDTH)); -- daq_fpga.spy_frame_tx / base 0x00000350 / mask 0x000007f0
    elsif std_match(addr, "---------------------0110110----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_DAQ_FPGA_SPY_FRAME_RX, IPBUS_SEL_WIDTH)); -- daq_fpga.spy_frame_rx / base 0x00000360 / mask 0x000007f0
    elsif std_match(addr, "---------------------1000000----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_FREQUENCY_COUNTERS, IPBUS_SEL_WIDTH)); -- frequency_counters / base 0x00000400 / mask 0x000007f0
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;

  end function ipbus_sel_dth_tcds2_backend_interface;

end ipbus_decode_dth_tcds2_backend_interface;

